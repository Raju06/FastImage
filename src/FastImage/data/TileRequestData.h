// NIST-developed software is provided by NIST as a public service. 
// You may use, copy and distribute copies of the  software in any  medium, 
// provided that you keep intact this entire notice. You may improve, 
// modify and create derivative works of the software or any portion of the 
// software, and you may copy and distribute such modifications or works. 
// Modified works should carry a notice stating that you changed the software 
// and should note the date and nature of any such change. Please explicitly 
// acknowledge the National Institute of Standards and Technology as the 
// source of the software.
// NIST-developed software is expressly provided "AS IS." NIST MAKES NO WARRANTY
// OF ANY KIND, EXPRESS, IMPLIED, IN FACT  OR ARISING BY OPERATION OF LAW, 
// INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTY OF MERCHANTABILITY, 
// FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT AND DATA ACCURACY. NIST 
// NEITHER REPRESENTS NOR WARRANTS THAT THE OPERATION  OF THE SOFTWARE WILL 
// BE UNINTERRUPTED OR ERROR-FREE, OR THAT ANY DEFECTS WILL BE CORRECTED. NIST 
// DOES NOT WARRANT  OR MAKE ANY REPRESENTATIONS REGARDING THE USE OF THE 
// SOFTWARE OR THE RESULTS THEREOF, INCLUDING BUT NOT LIMITED TO THE 
// CORRECTNESS, ACCURACY, RELIABILITY, OR USEFULNESS OF THE SOFTWARE.
// You are solely responsible for determining the appropriateness of using 
// and distributing the software and you assume  all risks associated with 
// its use, including but not limited to the risks and costs of program 
// errors, compliance  with applicable laws, damage to or loss of data, 
// programs or equipment, and the unavailability or interruption of operation. 
// This software is not intended to be used in any situation where a failure 
// could cause risk of injury or damage to property. The software developed 
// by NIST employees is not subject to copyright protection within 
// the United States.

/// @file TileRequestData.h
/// @author Alexandre Bardakoff - Timothy Blattner
/// @date  7/28/17
/// @brief Data representing a tile request

#ifndef FASTIMAGE_TILEREQUESTDATA_H
#define FASTIMAGE_TILEREQUESTDATA_H

#include <ostream>
#include <htgs/api/IData.hpp>
#include <htgs/types/Types.hpp>

#include "ViewRequestData.h"
#include "FastImage/api/View.h"

using namespace htgs;

/// \namespace fi FastImage namespace
namespace fi {


/**
 * @class TileRequestData TileRequestData.h <FastImage/data/TileRequestData.h>
 * @brief Data representing a tile request.
 * @details The Tile Request Data represent a specific tile request which will
 * fill the future view. It has been generated by The ViewLoader and sent to the
 * ATileLoader. The ATileLoader will use it to know which tile to request to the
 * cache / file and then copy part or the whole tile into the view.
 * All the positions for the copy (source/destination) are stored into the
 * TileRequestData.
 * @tparam UserType Pixel Type asked by the end user
 *
 */
template<typename UserType>
class TileRequestData : public htgs::IData {
 public:
  /// \brief TileRequestData constructor
  /// \details Construct by a ViewLoader to a ATileLoader, the
  /// TileRequestData represent the Tile to load from the file (or cache if
  /// available) and the part to copy into the view.
  /// \param rowTileAsked Row index tile asked
  /// \param colTileAsked Col index tile asked
  /// \param viewData ViewData where to put the TileData
  /// \param viewRequest View request generating the view data
  TileRequestData(uint32_t rowTileAsked,
                      uint32_t colTileAsked,
                      const m_data_t<View<UserType>> &viewData,
                      const std::shared_ptr<ViewRequestData<UserType>>
                      &viewRequest)
      :
      _indexRowTileAsked(rowTileAsked),
      _indexColTileAsked(colTileAsked),
      _rowFrom(0),
      _colFrom(0),
      _rowDest(0),
      _colDest(0),
      _heightToCopy(0),
      _widthToCopy(0),
      _topToFill(0),
      _bottomToFill(0),
      _leftToFill(0),
      _rightToFill(0),
      _viewData(viewData),
      _viewRequest(viewRequest) {}

  /// \brief Get the Index Row Tile Asked
  /// \return The Index Row Tile Asked
  uint32_t getIndexRowTileAsked() const { return _indexRowTileAsked; }

  /// \brief Get the Index Column Tile Asked
  /// \return The Index Column Tile Asked
  uint32_t getIndexColTileAsked() const { return _indexColTileAsked; }

  /// \brief Get the row to copy from
  /// \return Row to copy from
  uint32_t getRowFrom() const { return _rowFrom; }

  /// \brief Get the col to copy from
  /// \return Col to copy from
  uint32_t getColFrom() const { return _colFrom; }

  /// \brief Get the row to copy to
  /// \return Row to copy to
  uint32_t getRowDest() const { return _rowDest; }

  /// \brief Get the col to copy to
  /// \return Col to copy to
  uint32_t getColDest() const { return _colDest; }

  /// \brief Get height to copy
  /// \return Height to copy
  uint32_t getHeightToCopy() const { return _heightToCopy; }

  /// \brief Get Width to copy
  /// \return Width to copy
  uint32_t getWidthToCopy() const { return _widthToCopy; }

  /// \brief Get top rows to fill
  /// \return Top rows to fill
  uint32_t getTopToFill() const { return _topToFill; }

  /// \brief Get bottom rows to fill
  /// \return Bottom rows to fill
  uint32_t getBottomToFill() const { return _bottomToFill; }

  /// \brief Get left columns to fill
  /// \return Left columns to fill
  uint32_t getLeftToFill() const { return _leftToFill; }

  /// \brief Get right columns to fill
  /// \return Right columns to fill
  uint32_t getRightToFill() const { return _rightToFill; }

  /// \brief Get the View data
  /// \return The View data
  const htgs::m_data_t<View<UserType>> &getViewData() const {
    return _viewData;
  }

  /// \brief Get the view request data
  /// \return View request data
  const std::shared_ptr<ViewRequestData<UserType>> &getViewRequest() const {
    return _viewRequest;
  }

  /// \brief Get tile Height
  /// \return Tile height
  uint32_t getTileHeight() const { return _viewRequest->getTileHeight(); }

  /// \brief Get tile width
  /// \return Tile width
  uint32_t getTileWidth() const { return _viewRequest->getTileWidth(); }

  /// \brief Get view height
  /// \return View height
  uint32_t getViewHeight() const { return _viewRequest->getViewHeight(); }

  /// \brief Get view width
  /// \return View width
  uint32_t getViewWidth() const { return _viewRequest->getViewWidth(); }

  /// \brief Set the row to copy from
  /// \param rowFrom Row to copy from
  void setRowFrom(uint32_t rowFrom) { _rowFrom = rowFrom; }

  /// \brief Set the col to copy from
  /// \param colFrom Col to copy from
  void setColFrom(uint32_t colFrom) { _colFrom = colFrom; }

  /// \brief Set the row to copy to
  /// \param rowDest Row to copy to
  void setRowDest(uint32_t rowDest) { _rowDest = rowDest; }

  /// \brief Set the col to copy to
  /// \param colDest Col to copy to
  void setColDest(uint32_t colDest) { _colDest = colDest; }

  /// \brief Set height to copy
  /// \param heightToCopy Height to copy
  void setHeightToCopy(uint32_t heightToCopy) { _heightToCopy = heightToCopy; }

  /// \brief Set width to copy
  /// \param widthToCopy Width to copy
  void setWidthToCopy(uint32_t widthToCopy) { _widthToCopy = widthToCopy; }

  /// \brief Set top rows to fill
  /// \param topToFill Top rows to fill
  void setTopToFill(uint32_t topToFill) { _topToFill = topToFill; }

  /// \brief Set bottom rows to fill
  /// \param bottomToFill Bottom rows to fill
  void setBottomToFill(uint32_t bottomToFill) { _bottomToFill = bottomToFill; }

  /// \brief Set left columns to fill
  /// \param leftToFill Left columns to fill
  void setLeftToFill(uint32_t leftToFill) { _leftToFill = leftToFill; }

  /// \brief Set right columns to fill
  /// \param rightToFill Right columns to fill
  void setRightToFill(uint32_t rightToFill) { _rightToFill = rightToFill; }

  /// \brief Output stream operator for tge TileRequestData
  /// \param os Output stream
  /// \param data TileRequestData to print
  /// \return Output stream with the TileRequestData data
  friend std::ostream &operator<<(std::ostream &os,
                                  const TileRequestData &data) {
    os << "TileRequestData[" << *(data._viewRequest) << "]";
    return os;
  }

 private:
  uint32_t
      _indexRowTileAsked, ///< Row index tile needed
      _indexColTileAsked, ///< Column index tile needed
      _rowFrom,           ///< Row to copy from
      _colFrom,           ///< Col to copy from
      _rowDest,           ///< Row to copy to
      _colDest,           ///< Col to copy to
      _heightToCopy,      ///< Height to copy
      _widthToCopy,       ///< Width to copy
      _topToFill,         ///< Top rows to fill with ghost data
      _bottomToFill,      ///< Bottom rows to fill with ghost data
      _leftToFill,        ///< Left columns to fill with ghost data
      _rightToFill;       ///< Right columns to fill with ghost data

  htgs::m_data_t<View<UserType>>
      _viewData;          ///< View linked to the tile request

  std::shared_ptr<ViewRequestData<UserType>>
      _viewRequest;       ///<View request generating the view data
};
}
#endif //FASTIMAGE_TILEREQUESTDATA_H
